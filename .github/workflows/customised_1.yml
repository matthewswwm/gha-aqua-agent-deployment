name: Deploy Aqua Enforcer (customised_1)

on:
  workflow_dispatch:
      inputs:
          PLATFORM:
            description: "Which cloud provider are you deploying to? e.g. aks, gke"
            required: true
            default: "gke"
          CLUSTER:
            description: "What cluster are you deploying to? This will also determine the name of the Aqua enforcer group"
            required: true

jobs:
  deploy:
    runs-on: ubuntu-24.04
    env:
      AQUA_REG: ${{ vars.AQUA_REG}} # The registry that stores the aqua enforcer image
      AQUA_REG_USERNAME: ${{ secrets.AQUA_REG_USERNAME }} # Registry credentials to pull the image
      AQUA_REG_PASSWORD: ${{ secrets.AQUA_REG_PASSWORD }} # Registry credentials to pull the image
      AQUA_IMAGE: ${{ vars.AQUA_IMAGE}} # The full name of the image (repository path and tag)

      AQUA_CONSOLE_URL: ${{ vars.AQUA_CONSOLE_URL }} # For CWPP API calls
      AQUA_AUTH_URL: ${{ vars.AQUA_AUTH_URL }} # For authenticating against Aqua SaaS
      AQUA_GATEWAY_URL: ${{ vars.AQUA_GATEWAY_URL }}
      AQUA_SAAS_USER: ${{ secrets.AQUA_SAAS_USER }}
      AQUA_SAAS_PASSWORD: ${{ secrets.AQUA_SAAS_PASSWORD }}

      KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }} # This will not be used in final ver

    steps:
      # 1. Clone repository
      - name: Clone repository
        run: |
          git init .
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin ${{ github.ref }}
          git checkout -b main FETCH_HEAD

      # n. Configure kubeconfig from base64 secret (to be removed in final version)
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > ~/.kube/config

      # 2. Authenticate against the Aqua console and create an enforcer group
      - name: Create Aqua Enforcer Group
        run: |
          set -x # troubleshooting
          echo "[INFO]: Running authentication API call"

          payload="{\"email\":\"${{ secrets.AQUA_SAAS_USER }}\", \"password\":\"${{ secrets.AQUA_SAAS_PASSWORD }}\"}"

          # Send the POST request and store the response in a variable
          response=$(curl -s -X POST -H "Content-Type: application/json" -d "$payload" "${{ env.AQUA_AUTH_URL }}/v2/signin")

          # Parse the response to get the Bearer Token
          export aquatoken=$(echo "$response" | jq -r ".data.token")

          # Error handling
          if [[ "$aquatoken" == "null" ]]; then
              echo "[ERROR]: Bearer Token returned is null. Please ensure the authentication URL, email and password are correct. Check if the password has special characters that are being interpolated."
              exit 1
          fi

          echo "[INFO]: authentication API call completed"

          echo "[INFO]: Running post_enforcer_grp API call"

          export enf_grp_payload=$(cat <<EOF
          {
            "id": "${{ github.event.inputs.CLUSTER }}",
            "logicalname": "${{ github.event.inputs.CLUSTER }}",
            "token": "${{ github.event.inputs.CLUSTER }}",
            "enforce": true,
            "allowed_labels": [],
            "allowed_secrets": [],
            "container_activity_protection": true,
            "description": "",
            "gateways": [],
            "host_os": "Linux",
            "hostname": "",
            "image_assurance": true,
            "network_protection": false,
            "behavioral_engine": true,
            "orchestrator":{"type":"kubernetes","service_account":"","namespace":"aqua"},
            "runtime_type": "docker",
            "sync_host_images": true,
            "syscall_enabled": false,
            "type": "agent",
            "user_access_control": false,
            "runtime_policy_name": "",
            "allowed_labels_temp": [],
            "allowed_secrets_temp": [],
            "risk_explorer_auto_discovery": false,
            "host_protection": true,
            "host_network_protection": false,
            "host_user_protection": false,
            "host_behavioral_engine": true,
            "allow_kube_enforcer_audit": false,
            "auto_discovery_enabled": false,
            "auto_discover_configure_registries": false,
            "auto_scan_discovered_images_running_containers": false,
            "admission_control": false,
            "block_admission_control": false,
            "micro_enforcer_injection": false,
            "micro_enforcer_image_name": "",
            "micro_enforcer_secrets_name": "",
            "auto_copy_secrets": false,
            "micro_enforcer_certs_secrets_name": "",
            "kube_bench_image_name": "",
            "antivirus_protection": false,
            "container_antivirus_protection": false,
            "host_assurance": true,
            "host_forensics_collection": true,
            "container_forensics_collection": true,
            "enforcer_image_name": "${{ env.AQUA_IMAGE }}"
          }
          EOF
          )

          enf_grp_response=$(curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $aquatoken" \
              -d "$enf_grp_payload" \
              ${{ env.AQUA_CONSOLE_URL }}/api/v1/hostsbatch)

          echo "[INFO]: post_enforcer_grp API call for $enf_grp_name completed"

      # 3. Deploy Aqua Enforcer (Manifests)
      #    (a) namespace
      #    (b) registry secret
      #    (c) service account & RBAC
      #    (d) enforcer token secret # No need to use the yaml manifests as it is a single entry
      #    (e) configMap
      #    (f) daemonset

      # - name: Show working dir
      #   run : |
      #     ls -la

      - name: Create Aqua namespace
        run: |
          kubectl create namespace aqua \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Aqua registry secret
        run: |
          kubectl create secret docker-registry aqua-registry \
            --docker-server=${{ env.AQUA_REG }} \
            --docker-username="${{ env.AQUA_REG_USERNAME }}" \
            --docker-password="${{ env.AQUA_REG_PASSWORD }}" \
            -n aqua \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create service account and RBAC
        run: |
          kubectl apply -f \
            ./yamls/aqua_enforcer/manifests/001_aqua_enforcer_rbac/${{ github.event.inputs.PLATFORM }}/aqua_sa.yaml

      - name: Create enforcer token secret
        run: |
          kubectl create secret generic enforcer-token \
            --from-literal=token="${{ github.event.inputs.CLUSTER }}" \
            -n aqua \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy ConfigMap
        run: |
          cat ./yamls/aqua_enforcer/manifests/002_aqua_enforcer_configMap.yaml \
            | sed -e "s/AQUA_SERVER:[[:blank:]]*\".*\"/AQUA_SERVER: \"${{ env.AQUA_GATEWAY_URL }}\"/" \
            | sed -e "s/AQUA_LOGICAL_NAME:[[:blank:]]*\".*\"/AQUA_LOGICAL_NAME: \"${{ github.event.inputs.CLUSTER }}\"/" \
            | kubectl apply -f -

      - name: Deploy Aqua Enforcer DaemonSet
        run: |
          cat ./yamls/aqua_enforcer/manifests/004_aqua_enforcer_daemonset.yaml \
            | sed -e "s|image:[[:blank:]]*[^[:space:]]*|image: \"${{ env.AQUA_IMAGE }}\"|" \
            | kubectl apply -f -